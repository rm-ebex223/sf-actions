on:
  pull_request:
    branches:
      - main
    paths:
      - '**.tf'

jobs:
  tf_pr_merged_main:
    # if closed and merged to main, apply TF to main
    name: main - terraform apply
    if: github.event.pull_request.merged == true && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:        
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform init
      id: init
      env:
        TF_WORKSPACE: "gh-actions-prod"
      run: |
        terraform init
        echo "ACTIVE_WORKSPACE=${TF_WORKSPACE}" >> $GITHUB_ENV

    - name: Switch workspace
      id: workspace
      run: terraform workspace select ${{ env.ACTIVE_WORKSPACE }}

    - name: Terraform format
      id: fmt
      run: terraform fmt -check

    - name: Terraform validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform plan
      id: plan
      run: terraform plan -no-color -compact-warnings
      continue-on-error: true
    
    - name: Check tf plan status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Terraform apply 
      id: apply
      run: terraform apply -no-color -auto-approve
    # add the TF apply output to the closed PR for auditing
    - name: Add apply output to PR
      uses: actions/github-script@v7
      env:
        APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `*Status - terraform plan: \`${{ steps.apply.outcome }}\`
          Environment - \`${{ env.ACTIVE_WORKSPACE }}\`
          Pushed by: @${{ github.actor }}*

          <details><summary>Apply output</summary>
          
          \`\`\`\n
          ${process.env.APPLY}
          \`\`\`
            
          </details>`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
  # tf_pr_main:
  #   name: main - terraform plan
  #   runs-on: ubuntu-latest
  #   steps:        
  #     - name: Checkout
  #       uses: actions/checkout@v4
  
  #     - name: Setup terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #     - name: Terraform init
  #       id: init
  #       env:
  #         TF_WORKSPACE: "gh-actions-prod"
  #       run: |
  #         terraform init
  #         echo "ACTIVE_WORKSPACE=${TF_WORKSPACE}" >> $GITHUB_ENV

  #     - name: Switch workspace
  #       id: workspace
  #       run: terraform workspace select ${{ env.ACTIVE_WORKSPACE }}
  
  #     - name: Terraform format
  #       id: fmt
  #       run: terraform fmt -check
  
  #     - name: Terraform validate
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform plan
  #       id: plan
  #       run: terraform plan -no-color -compact-warnings
  #       continue-on-error: true

  #     - uses: actions/github-script@v7
  #       if: github.event_name == 'pull_request'
  #       env:
  #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |     
  #           // 1. Retrieve existing bot comments for the PR
  #             const { data: comments } = await github.rest.issues.listComments({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               issue_number: context.issue.number,
  #             })
  #             const botComment = comments.find(comment => {
  #               return comment.user.type === 'Bot' && comment.body.includes(' terraform plan: ')
  #             })

  #             // 2. Prepare format of the comment
  #             const output = `*Status - terraform plan: \`${{ steps.plan.outcome }}\`
  #             Environment - \`${{ env.ACTIVE_WORKSPACE }}\`
  #             Pushed by: @${{ github.actor }}*
              
  #             <details><summary>Show Plan</summary>

  #             \`\`\`\n
  #             ${process.env.PLAN}
  #             \`\`\`

  #             </details>`;

  #             // 3. If we have a comment, update it, otherwise create a new one
  #             if (botComment) {
  #               github.rest.issues.updateComment({
  #                 owner: context.repo.owner,
  #                 repo: context.repo.repo,
  #                 comment_id: botComment.id,
  #                 body: output
  #               })
  #             } else {
  #               github.rest.issues.createComment({
  #                 issue_number: context.issue.number,
  #                 owner: context.repo.owner,
  #                 repo: context.repo.repo,
  #                 body: output
  #               })
  #             }

  #     - name: Check tf plan status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1