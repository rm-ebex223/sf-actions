on:
  pull_request:
    types: 
      [ opened,reopened,synchronize ]
    branches:
      - develop
    paths:
      - '**.tf'

jobs:
  tf_pr_develop:
    name: develop - terraform plan
    runs-on: ubuntu-latest
    steps:
      - name: Add some context
        env:
          TF_WORKSPACE: "gh-actions-dev"
        run: |
          echo github.base_ref: ${{ github.base_ref }}
          echo github.event.pull_request.merged: ${{ github.event.pull_request.merged }}
          echo github.event_name: ${{ github.event.action }}
          echo github.event.action: ${{ github.event_name }}
          echo "ACTIVE_WORKSPACE=${TF_WORKSPACE}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform init
        id: init
        run: |
          terraform init -no-color
        continue-on-error: true

      - name: Switch workspace
        id: workspace
        run: terraform workspace select ${{ env.ACTIVE_WORKSPACE }}
        continue-on-error: true
  
      - name: Terraform format check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
  
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -compact-warnings
        continue-on-error: true

      - name: Write failures to PR
        if: ${{ steps.init.outcome == 'failure' || steps.workspace.outcome == 'failure' || steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.plan.outcome == 'failure' }}
        uses: actions/github-script@v7
        env:
          INIT: "terraform\n${{ steps.init.outputs.stdout }}"
          WRKSPC: "terraform\n${{ steps.workspace.outputs.stdout }}"
          FMT: "terraform\n${{ steps.fmt.outputs.stdout }}"
          VLDT: "terraform\n${{ steps.validate.outputs.stdout }}"
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |     
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && 
              comment.body.includes(' terraform plan: ') && 
              comment.body.includes('Environment - \`gh-actions-dev\`')
            })

            // 2. Prepare format of the comment
            const output = `*Environment - \`${{ env.ACTIVE_WORKSPACE }}\`
            Last action - \`${{ github.event.action }}\`
            Status - terraform init: \`${{ steps.init.outcome }}\`
            Status - terraform workspace: \`${{ steps.workspace.outcome }}\`
            Status - terraform format: \`${{ steps.fmt.outcome }}\`
            Status - terraform validate: \`${{ steps.validate.outcome }}\`
            Status - terraform plan: \`${{ steps.plan.outcome }}\`*

            <details><summary>Init output</summary>

            \`\`\`
            ${process.env.INIT}
            \`\`\`

            </details>

            <details><summary>Workspace output</summary>

            \`\`\`
            ${process.env.WRKSPC}
            \`\`\`

            </details>

            <details><summary>Format output</summary>

            \`\`\`
            ${process.env.FMT}
            \`\`\`

            </details>

            <details><summary>Validate output</summary>

            \`\`\`
            ${process.env.VLDT}
            \`\`\`

            </details>

            <details><summary>Plan output</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Write failures to PR
        if: ${{ steps.init.outcome == 'failure' || steps.workspace.outcome == 'failure' || steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.plan.outcome == 'failure' }}
        run: exit 1

      - name: Terraform apply 
        if: ${{ github.base_ref == 'develop' && github.event.action != 'reopened' }}
        id: apply
        run: terraform apply -no-color -auto-approve
        continue-on-error: true

      - name: Write failures to PR
        if: ${{ steps.apply.outcome == 'failure' }}
        uses: actions/github-script@v7
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |     
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && 
              comment.body.includes(' terraform plan: ') && 
              comment.body.includes('Environment - \`gh-actions-dev\`')
            })

            // 2. Prepare format of the comment
            const output = `*Environment - \`${{ env.ACTIVE_WORKSPACE }}\`
            Last action - \`${{ github.event.action }}\`
            Status - terraform apply: \`${{ steps.apply.outcome }}\`*

            <details><summary>Apply output</summary>

            \`\`\`
            ${process.env.APPLY}
            \`\`\`

            </details>`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Write failures to PR
        if: ${{ steps.apply.outcome == 'failure' }}
        run: exit 1

      # - name: Add plan and apply outputs to PR
      #   uses: actions/github-script@v7
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #     APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |     
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       })
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && 
      #         comment.body.includes(' terraform plan: ') && 
      #         comment.body.includes('Environment - \`gh-actions-dev\`')
      #       })

      #       // 2. Prepare format of the comment
      #       const output = `*Environment - \`${{ env.ACTIVE_WORKSPACE }}\`
      #       Last action - \`${{ github.event.action }}\`
      #       Status - terraform plan: \`${{ steps.plan.outcome }}\`
      #       Status - terraform apply: \`${{ steps.apply.outcome }}\`*

      #       <details><summary>Plan output</summary>

      #       \`\`\`
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       <details><summary>Apply output</summary>

      #       \`\`\`
      #       ${process.env.APPLY}
      #       \`\`\`

      #       </details>`;

      #       // 3. If we have a comment, update it, otherwise create a new one
      #       if (botComment) {
      #         github.rest.issues.updateComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #           body: output
      #         })
      #       } else {
      #         github.rest.issues.createComment({
      #           issue_number: context.issue.number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: output
      #         })
      #       }
    
