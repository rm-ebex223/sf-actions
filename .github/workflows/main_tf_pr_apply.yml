on:
  pull_request:
    types: 
      [ closed ]
    branches:
      - main
    paths:
      - '**.tf'

jobs:
  tf_pr_not_merged_main:
    # if closed and merged to main, apply TF to main
    if: ${{ github.base_ref == 'main' && github.event.pull_request.merged == false }}
    name: main - closed without merge
    runs-on: ubuntu-latest
    steps:        
      - name: Add some context
        run: |
          echo github.base_ref: ${{ github.base_ref }}
          echo github.event.pull_request.merged: ${{ github.event.pull_request.merged }}
          echo github.event_name: ${{ github.event.action }}
          echo github.event.action: ${{ github.event_name }}

      - name: add closure message
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `PR closed without merging to main`; 
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  tf_pr_merged_main:
    # if closed and merged to main, apply TF to main
    if: ${{ github.base_ref == 'main' && github.event.pull_request.merged == true }}
    name: main - closed with merge
    runs-on: ubuntu-latest
    steps:
      - name: Add some context
        run: |
          echo github.base_ref: ${{ github.base_ref }}
          echo github.event.pull_request.merged: ${{ github.event.pull_request.merged }}
          echo github.event_name: ${{ github.event.action }}
          echo github.event.action: ${{ github.event_name }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform init
        id: init
        env:
          TF_WORKSPACE: "gh-actions-prod"
        run: |
          terraform init
          echo "ACTIVE_WORKSPACE=${TF_WORKSPACE}" >> $GITHUB_ENV

      - name: Switch workspace
        id: workspace
        run: terraform workspace select ${{ env.ACTIVE_WORKSPACE }}

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
    
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -compact-warnings
        continue-on-error: true
    
      - name: Check tf plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1
    
      - name: Terraform apply 
        id: apply
        run: terraform apply -no-color -auto-approve
        
      # add the TF apply output to the closed PR for auditing
      - name: Add plan and apply outputs to PR
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `*Environment - \`${{ env.ACTIVE_WORKSPACE }}\`
            Last action - \`${{ github.event.action }}\`
            Status - terraform plan: \`${{ steps.plan.outcome }}\`
            Status - terraform apply: \`${{ steps.apply.outcome }}\`*

            <details><summary>Plan output</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            <details><summary>Apply output</summary>

            \`\`\`
            ${process.env.APPLY}
            \`\`\`

            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })